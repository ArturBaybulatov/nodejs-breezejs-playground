import _ from 'lodash-fp'
import * as $$ from './util.js'

import breezeSequelize from 'breeze-sequelize'
import metadataHelper from './vendor/breeze.metadata-helper.MODIFIED.js'

const SequelizeManager = breezeSequelize.SequelizeManager
const breeze = breezeSequelize.breeze

metadataHelper(breeze)

const MetadataHelper = breeze.config.MetadataHelper
const EntityManager = breeze.EntityManager
const MetadataStore = breeze.MetadataStore
const DT = breeze.DataType

const models = {}
export default models

const helper = new MetadataHelper(
  'randomNamespace',
  breeze.AutoGeneratedKeyType.Identity
)

const store = new MetadataStore()
helper.addDataService(store, 'randomServiceName')

helper.addTypeToStore(store, {
  name: 'people',
  
  dataProperties: {
    id: {dataType: DT.Int32, isPartOfKey: true},
    name: {dataType: DT.String},
  },
  
  navigationProperties: {
    likes: {
      entityTypeName: 'likes',
      associationName: 'people_likes',
      invForeignKeyNames: ['person_id'],
      hasMany: true,
    },
  },
})

helper.addTypeToStore(store, {
  name: 'films',
  
  dataProperties: {
    id: {dataType: DT.Int32, isPartOfKey: true},
    name: {dataType: DT.String},
  },
  
  navigationProperties: {
    likes: {
      entityTypeName: 'likes',
      associationName: 'films_likes',
      invForeignKeyNames: ['film_id'],
      hasMany: true,
    },
  },
})

helper.addTypeToStore(store, {
  name: 'likes',
  
  dataProperties: {
    id: {dataType: DT.Int32, isPartOfKey: true},
    person_id: {dataType: DT.Int32},
    film_id: {dataType: DT.Int32},
  },
  
  navigationProperties: {
    person: {
      entityTypeName: 'people',
      associationName: 'people_likes',
      foreignKeyNames: ['person_id'],
      isScalar: true,
    },
    
    film: {
      entityTypeName: 'films',
      associationName: 'films_likes',
      foreignKeyNames: ['film_id'],
      isScalar: true,
    },
  },
})

const metadata = models.metadata = store.exportMetadata()

const sequelizeManager = models.sequelizeManager =
  new SequelizeManager(
    {
      dbName: '',
      user: '',
      password: '',
    }, {
      dialect: 'sqlite',
      storage: './dist/db.sqlite',
      
      //logging: false, // tmp
    }
  )

const sequelize = models.sequelize = sequelizeManager.sequelize

const sync = models.sync = function() {
  return sequelize.sync().then(() => console.log('synced'))
}

const drop = models.drop = function() {
  return sequelize.drop({cascade: true}).then(() => {
    console.log('dropped\ndon\'t forget to "sync()" afterwards')
  })
}

sequelizeManager.importMetadata(metadata)
_.extend(sequelize.models, models)
