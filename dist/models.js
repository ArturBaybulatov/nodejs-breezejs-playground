'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodashFp = require('lodash-fp');

var _lodashFp2 = _interopRequireDefault(_lodashFp);

var _util = require('./util.js');

var $$ = _interopRequireWildcard(_util);

var _breezeSequelize = require('breeze-sequelize');

var _breezeSequelize2 = _interopRequireDefault(_breezeSequelize);

var _breezeMetadataHelperMODIFIED = require('./vendor/breeze.metadata-helper.MODIFIED.js');

var _breezeMetadataHelperMODIFIED2 = _interopRequireDefault(_breezeMetadataHelperMODIFIED);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SequelizeManager = _breezeSequelize2.default.SequelizeManager;
var breeze = _breezeSequelize2.default.breeze;

(0, _breezeMetadataHelperMODIFIED2.default)(breeze);

var MetadataHelper = breeze.config.MetadataHelper;
var EntityManager = breeze.EntityManager;
var MetadataStore = breeze.MetadataStore;
var DT = breeze.DataType;

var models = {};
exports.default = models;

var helper = new MetadataHelper('randomNamespace', breeze.AutoGeneratedKeyType.Identity);

var store = new MetadataStore();
helper.addDataService(store, 'randomServiceName');

helper.addTypeToStore(store, {
  name: 'people',

  dataProperties: {
    id: { dataType: DT.Int32, isPartOfKey: true },
    name: { dataType: DT.String }
  },

  navigationProperties: {
    likes: {
      entityTypeName: 'likes',
      associationName: 'people_likes',
      invForeignKeyNames: ['person_id'],
      hasMany: true
    }
  }
});

helper.addTypeToStore(store, {
  name: 'films',

  dataProperties: {
    id: { dataType: DT.Int32, isPartOfKey: true },
    name: { dataType: DT.String }
  },

  navigationProperties: {
    likes: {
      entityTypeName: 'likes',
      associationName: 'films_likes',
      invForeignKeyNames: ['film_id'],
      hasMany: true
    }
  }
});

helper.addTypeToStore(store, {
  name: 'likes',

  dataProperties: {
    id: { dataType: DT.Int32, isPartOfKey: true },
    person_id: { dataType: DT.Int32 },
    film_id: { dataType: DT.Int32 }
  },

  navigationProperties: {
    person: {
      entityTypeName: 'people',
      associationName: 'people_likes',
      foreignKeyNames: ['person_id'],
      isScalar: true
    },

    film: {
      entityTypeName: 'films',
      associationName: 'films_likes',
      foreignKeyNames: ['film_id'],
      isScalar: true
    }
  }
});

var metadata = models.metadata = store.exportMetadata();

var sequelizeManager = models.sequelizeManager = new SequelizeManager({
  dbName: '',
  user: '',
  password: ''
}, {
  dialect: 'sqlite',
  storage: './dist/db.sqlite'

});

//logging: false, // tmp
var sequelize = models.sequelize = sequelizeManager.sequelize;

var sync = models.sync = function () {
  return sequelize.sync().then(function () {
    return console.log('synced');
  });
};

var drop = models.drop = function () {
  return sequelize.drop({ cascade: true }).then(function () {
    console.log('dropped\ndon\'t forget to "sync()" afterwards');
  });
};

sequelizeManager.importMetadata(metadata);
_lodashFp2.default.extend(sequelize.models, models);